<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="kr.co.wizbrain.tbn.receipt.mapper.ReceiptMapper">

	<insert id="insertReceipt" parameterType="receiptVO">
		<selectKey keyProperty="RECEIPT_ID" resultType="string"
			order="BEFORE">
			SELECT (TO_CHAR(SYSDATE , 'YYYYMMDD') || TO_CHAR(SEQ_RECEIPT_TODAY.NEXTVAL,
			'FM0000009')) FROM DUAL
		</selectKey>
		INSERT INTO REPORT_RECEIPT_TODAY(
		RECEIPT_ID
		, RECEIPT_DAY
		, RECEIPT_TIME
		, INDIVIDUAL_ID
		, INDIVIDUAL_NAME
		, INDIVIDUAL_TYPE
		, ORG_ID
		, ORG_NAME
		, RECEPTION_ID
		, RECEPTION_NAME
		, MEMO
		, ARTERY_ID
		, F_LINK_ID
		, T_LINK_ID
		, F_NODE_NAME
		, T_NODE_NAME
		, REGION_ID
		, START_DAY
		, START_TIME
		, END_DAY
		, END_TIME
		, REPORT_TYPE
		, REPORTER_TYPE
		, FLAG_SEND
		, FLAG_IMPORTANT
		, FLAG_DISASTOR
		, R_TEL
		, X_COORDINATE
		, Y_COORDINATE
		, REPORT_TYPE2
		, REPORT_TYPE3
		, AREA_ID
		, RECEPTION_EVA
		, FLAG_WEB
		)
		VALUES(
		#{RECEIPT_ID}
		, TO_CHAR(SYSDATE,'YYYYMMDD')
		, TO_CHAR(SYSDATE,'HH24MI')
		, #{INDIVIDUAL_ID}
		, #{INDIVIDUAL_NAME}
		, #{INDIVIDUAL_TYPE}
		, #{ORG_ID}

		, #{ORG_NAME}
		, #{RECEPTION_ID}
		, #{RECEPTION_NAME}
		, #{MEMO}
		, #{ARTERY_ID}

		, #{F_LINK_ID}
		, #{T_LINK_ID}
		, #{F_NODE_NAME}
		, #{T_NODE_NAME}
		, #{REGION_ID}

		, REPLACE(#{START_DAY}, '-', '')
		, #{STARTTIMEHH} || #{STARTTIMEMI}
		, REPLACE(#{END_DAY}, '-', '')
		, #{ENDTIMEHH} || #{ENDTIMEMI}

		, #{REPORT_TYPE}
		, #{REPORTER_TYPE}
		, #{FLAG_SEND}
		<!-- , #{FLAG_IMPORTANT} -->
		<!-- 220905 제보내용에 '긴급'문구가 포함된 경우 긴급으로 처리하도록 -->
		, CASE 
			WHEN 
				<!-- 긴급제보 체크됬을땐 제보내용에 상관없이 Y -->
    			#{FLAG_IMPORTANT} like '%Y%' then 'Y'
    			<!-- 긴급이 N일경우 제보내용에 긴급 포함되면 Y --> 
    			ELSE 
					CASE WHEN 
					#{MEMO} like '%긴급%' then 'Y' else 'N' 
		 		END
		 	END
		, #{FLAG_DISASTOR}
		, REPLACE(#{R_TEL},'-', '')
		, #{X_COORDINATE}
		, #{Y_COORDINATE}
		, #{REPORT_TYPE2}
		, #{REPORT_TYPE3}

		, #{AREA_ID}
		, #{LANE}
		, #{FLAG_WEB}
		)
	</insert>

	<select id="getMissedCallInfoById" resultType="missedCallVO">
		SELECT * FROM MISSED_CALL WHERE MISSED_CALL_ID = #{MISSED_CALL_ID}
	</select>


	<!--  24-11-11 : 공지사항 조회 쿼리  -->
	<select id="selectNotice" resultType="kr.co.wizbrain.tbn.notice.vo.NoticeVO">
		select *
		from notice_info
		where start_date <![CDATA[<=]]> #{today}
		and end_date <![CDATA[>=]]> #{today}
		ORDER BY start_date DESC
		LIMIT 1
	</select>

	<!-- 24-11-12 : 하루동안 보지않음 조회 쿼리  -->
	<select id="selectShow" resultType="kr.co.wizbrain.tbn.notice.vo.NoticeVO">
		select * 
		from show_notice
		where user_id = #{user}
		and notice_id = #{noticeId}
	</select>
	
	<!--  24-11-12 : 하루동안 보지않음 등록 쿼리 -->
	<insert id="insertShow">
		insert into show_notice(USER_ID,NOTICE_ID,SHOW_24,SHOW_TIME) values(#{user},#{noticeId},'yes',#{today})
	</insert>
	
	<!--  24-11-12 : 공지사항 한개만 조회 -->
	<select id="selectOneNotice" resultType="kr.co.wizbrain.tbn.notice.vo.NoticeVO">
		select *
		from notice_info
		where notice_id = #{noticeId}
	</select>
	
	<!--  24-11-13 : 공지사항 업데이트 -->
	<update id="updateShow">
		update show_notice
		set show_24 = 'no', show_time = #{today}
		where user_id = #{user} and notice_id= #{noticeId}
	</update>
	
		
	<update id="updateMonthlyStat" parameterType="receiptVO">
		MERGE INTO STAT_TBN_MONRPT A
		USING DUAL
		ON (A.IND_ID = #{INDIVIDUAL_ID}
		AND A.STAT_MON = TO_CHAR(SYSDATE,'YYYYMM'))
		WHEN MATCHED THEN
		<choose>
			<when test='FLAG_IMPORTANT.equals("Y")'>
				UPDATE SET A.MON_CNT = A.MON_CNT+1
				, A.MAIN_CNT = A.MAIN_CNT+1
			</when>
			<otherwise>
				UPDATE SET A.MON_CNT = A.MON_CNT+1
			</otherwise>
		</choose>
		WHEN NOT MATCHED THEN
		<!-- 조건 더 세분화 해야함
		기존에 존재하는 통신원인데 매월 1일에 날짜가 없으니
		이사람이 통신원인지 등록안된 시민인지 한번더 판별하는 부분이 필요
		 -->
		INSERT(STAT_MON, IND_ID, ORG_ID, IND_TYPE, MON_CNT, MAIN_CNT, ADD_CNT, AREA_CODE,EVA_CNT)
		<choose>
			<when test='FLAG_IMPORTANT.equals("Y")'>
				VALUES
				(TO_CHAR(SYSDATE,'YYYYMM'), #{INDIVIDUAL_ID}, #{ORG_ID}
				, DECODE((select count(INFORMER_ID)TT FROM INFORMER WHERE INFORMER_ID=#{INDIVIDUAL_ID}),0,'2',(SELECT INFORMER_TYPE FROM INFORMER WHERE INFORMER_ID=#{INDIVIDUAL_ID}))
				, 1, 1, 0
				, DECODE((select count(INFORMER_ID)TT FROM INFORMER WHERE INFORMER_ID=#{INDIVIDUAL_ID}),0,#{REGION_ID},(SELECT AREA_CODE FROM INFORMER WHERE INFORMER_ID=#{INDIVIDUAL_ID}))
				, 0)
			</when>
			<otherwise>
				VALUES
				(TO_CHAR(SYSDATE,'YYYYMM'), #{INDIVIDUAL_ID}, #{ORG_ID}
				, DECODE((select count(INFORMER_ID)TT FROM INFORMER WHERE INFORMER_ID=#{INDIVIDUAL_ID}),0,'2',(SELECT INFORMER_TYPE FROM INFORMER WHERE INFORMER_ID=#{INDIVIDUAL_ID}))
				, 1, 0, 0
				, DECODE((select count(INFORMER_ID)TT FROM INFORMER WHERE INFORMER_ID=#{INDIVIDUAL_ID}),0,#{REGION_ID},(SELECT AREA_CODE FROM INFORMER WHERE INFORMER_ID=#{INDIVIDUAL_ID}))
				, 0)
			</otherwise>
		</choose>
	</update>

	<select id="selectInformerByPhone" resultType="informerVO">
		SELECT REGEXP_REPLACE(A.PHONE_CELL ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_CELL,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_CELL
		, REGEXP_REPLACE(A.PHONE_HOME ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_HOME,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_HOME
		, A.INFORMER_ID, A.ACT_ID, A.INFORMER_NAME, A.INFORMER_TYPE,
		A.ADDRESS_HOME, A.ZIPCODE, A.FLAG_BLACKLIST, A.MEMO, A.REG_DATE,
		A.DEL_DATE, A.UPD_DATE, A.AREA_CODE, A.ORG_ID, A.ORG_SUB_ID
		, B.ORG_NAME, B.ORG_SNAME, C.TYPE_NAME,D.AREA_NAME
		FROM INFORMER A
		LEFT OUTER JOIN (SELECT A.ORG_ID, A.ORG_NAME, A.AREA_CODE, A.IND_TYPE,
		B.ORG_SID, B.ORG_SNAME
		FROM ORGANIZATION A LEFT OUTER JOIN ORG_SUB B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.IND_TYPE =
		B.IND_TYPE) B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.ORG_SUB_ID =
		B.ORG_SID
		LEFT OUTER JOIN CODE_INFORMER_TYPE C
		ON A.INFORMER_TYPE = C.TYPE_ID
		LEFT OUTER JOIN CODE_AREACODE D
		ON A.AREA_CODE = D.AREA_CODE
		WHERE PHONE_CELL LIKE '%'||#{PHONE_CELL}||'%'
		OR PHONE_HOME LIKE '%'||#{PHONE_CELL}||'%'
		OR PHONE_OFFICE LIKE '%'||#{PHONE_CELL}||'%'
	</select>

	<select id="getMonthlyTotal" resultType="int">
		SELECT MON_CNT FROM STAT_TBN_MONRPT
		WHERE IND_ID=#{INFORMER_ID}
		AND STAT_MON=#{DATE}
	</select>

	<select id="selectInformerByID" resultType="informerVO">
		SELECT REGEXP_REPLACE(A.PHONE_CELL ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_CELL,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_CELL
		, REGEXP_REPLACE(A.PHONE_HOME ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_HOME,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_HOME
		, A.INFORMER_ID, A.ACT_ID, A.INFORMER_NAME, A.INFORMER_TYPE,
		A.ADDRESS_HOME, A.ZIPCODE, A.FLAG_BLACKLIST, A.MEMO, A.REG_DATE,
		A.DEL_DATE, A.UPD_DATE, A.AREA_CODE, A.ORG_ID, A.ORG_SUB_ID
		, B.ORG_NAME, B.ORG_SNAME, C.TYPE_NAME,D.AREA_NAME
		FROM INFORMER A
		LEFT
		OUTER JOIN (SELECT A.ORG_ID, A.ORG_NAME, A.AREA_CODE, A.IND_TYPE,
		B.ORG_SID, B.ORG_SNAME
		FROM ORGANIZATION A LEFT OUTER JOIN ORG_SUB B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.IND_TYPE =
		B.IND_TYPE) B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.ORG_SUB_ID =
		B.ORG_SID
		LEFT OUTER JOIN CODE_INFORMER_TYPE C
		ON A.INFORMER_TYPE = C.TYPE_ID
		LEFT OUTER JOIN CODE_AREACODE D
		ON A.AREA_CODE = D.AREA_CODE
		WHERE INFORMER_ID = #{INFORMER_ID}
	</select>

	<select id="reportTypeOnChange" resultType="reportTypeVO">
		SELECT * FROM CODE_REPORT_TYPE
		WHERE BAS_LCOD = #{BAS_LCOD}
		ORDER BY BAS_LCOD ASC, BAS_SCOD ASC
	</select>

	<select id="firstReportType" resultType="reportTypeVO">
		SELECT * FROM CODE_REPORT_TYPE
		WHERE BAS_LCOD='100'
		ORDER BY BAS_LCOD ASC, BAS_SCOD ASC
	</select>

	<select id="selectReportMean" resultType="reportMeanVO">
		SELECT * FROM CODE_REPORTMEAN_TYPE
	</select>

	<select id="selectInformerType" resultType="informerTypeVO">
		SELECT * FROM CODE_INFORMER_TYPE
	</select>

	<select id="selectAreaCode" resultType="areaCodeVO">
		SELECT * FROM CODE_AREACODE order by idx asc
	</select>

	<select id="selectAreaCodeSub" resultType="subAreaCodeVO">
		SELECT * FROM CODE_AREA_SUB
		WHERE AREA_CODE = #{AREA_CODE}
	</select>

	<select id="searchInformerByName" resultType="informerVO">
		SELECT REGEXP_REPLACE(A.PHONE_CELL ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_CELL,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_CELL
		, REGEXP_REPLACE(A.PHONE_HOME ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_HOME,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_HOME
		, A.INFORMER_ID, A.ACT_ID, A.INFORMER_NAME, A.INFORMER_TYPE,
		A.ADDRESS_HOME, A.ZIPCODE, A.FLAG_BLACKLIST, A.MEMO, A.REG_DATE,
		A.DEL_DATE, A.UPD_DATE, A.AREA_CODE, A.ORG_ID, A.ORG_SUB_ID
		, B.ORG_NAME, B.ORG_SNAME, C.TYPE_NAME,D.AREA_NAME
		FROM INFORMER A
		LEFT
		OUTER JOIN (SELECT A.ORG_ID, A.ORG_NAME, A.AREA_CODE, A.IND_TYPE,
		B.ORG_SID, B.ORG_SNAME
		FROM ORGANIZATION A LEFT OUTER JOIN ORG_SUB B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.IND_TYPE =
		B.IND_TYPE) B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.ORG_SUB_ID =
		B.ORG_SID
		LEFT OUTER JOIN CODE_INFORMER_TYPE C
		ON A.INFORMER_TYPE = C.TYPE_ID
		LEFT OUTER JOIN CODE_AREACODE D
		ON A.AREA_CODE = D.AREA_CODE
		WHERE INFORMER_NAME LIKE '%'||#{informer_name}||'%'
		AND A.AREA_CODE = #{areaCode}
	</select>

	<select id="searchInformerByCode" resultType="informerVO">
		SELECT REGEXP_REPLACE(A.PHONE_CELL ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_CELL,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_CELL
		, REGEXP_REPLACE(A.PHONE_HOME ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_HOME,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_HOME
		, A.INFORMER_ID, A.ACT_ID, A.INFORMER_NAME, A.INFORMER_TYPE,
		A.ADDRESS_HOME, A.ZIPCODE, A.FLAG_BLACKLIST, A.MEMO, A.REG_DATE,
		A.DEL_DATE, A.UPD_DATE, A.AREA_CODE, A.ORG_ID, A.ORG_SUB_ID
		, B.ORG_NAME, B.ORG_SNAME, C.TYPE_NAME, D.AREA_NAME
		FROM INFORMER A
		LEFT
		OUTER JOIN (SELECT A.ORG_ID, A.ORG_NAME, A.AREA_CODE, A.IND_TYPE,
		B.ORG_SID, B.ORG_SNAME
		FROM ORGANIZATION A LEFT OUTER JOIN ORG_SUB B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.IND_TYPE =
		B.IND_TYPE) B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.ORG_SUB_ID =
		B.ORG_SID
		LEFT OUTER JOIN CODE_INFORMER_TYPE C
		ON A.INFORMER_TYPE = C.TYPE_ID
		LEFT OUTER JOIN CODE_AREACODE D
		ON A.AREA_CODE = D.AREA_CODE
		WHERE ACT_ID = #{act_id}
		AND A.AREA_CODE = #{areaCode}
	</select>

	<select id="searchInformerByPhone" resultType="informerVO">
	    SELECT REGEXP_REPLACE(A.PHONE_CELL ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_CELL,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_CELL
		, REGEXP_REPLACE(A.PHONE_HOME ,'([[:digit:]]{'||
		DECODE(SUBSTR(A.PHONE_HOME,0,2
		),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		PHONE_HOME
		, A.INFORMER_ID, A.ACT_ID, A.INFORMER_NAME, A.INFORMER_TYPE,
		A.ADDRESS_HOME, A.ZIPCODE, A.FLAG_BLACKLIST, A.MEMO, A.REG_DATE,
		A.DEL_DATE, A.UPD_DATE, A.AREA_CODE, A.ORG_ID, A.ORG_SUB_ID
		, B.ORG_NAME, B.ORG_SNAME, C.TYPE_NAME,D.AREA_NAME
		FROM INFORMER A
		LEFT OUTER JOIN (SELECT A.ORG_ID, A.ORG_NAME, A.AREA_CODE, A.IND_TYPE,
		B.ORG_SID, B.ORG_SNAME
		FROM ORGANIZATION A LEFT OUTER JOIN ORG_SUB B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.IND_TYPE =
		B.IND_TYPE) B
		ON A.ORG_ID = B.ORG_ID AND A.AREA_CODE = B.AREA_CODE AND A.ORG_SUB_ID =
		B.ORG_SID
		LEFT OUTER JOIN CODE_INFORMER_TYPE C
		ON A.INFORMER_TYPE = C.TYPE_ID
		LEFT OUTER JOIN CODE_AREACODE D
		ON A.AREA_CODE = D.AREA_CODE
		WHERE (PHONE_CELL LIKE '%'||#{phone_cell}||'%'
		OR PHONE_HOME LIKE '%'||#{phone_cell}||'%'
		OR PHONE_OFFICE LIKE '%'||#{phone_cell}||'%')
		AND A.AREA_CODE = #{areaCode}
	</select>
	
	<update id="saveInformerMemo" parameterType="informerVO">
		UPDATE INFORMER
		SET MEMO = #{MEMO}
		WHERE INFORMER_ID = #{INFORMER_ID}
	</update>

	<select id="selectArtery" resultType="arteryVO">
		SELECT lpad(rownum,2,'0') AS NUM
		, A.*
		FROM 
		(
			select * from code_artery
			where area_code = #{AREA_CODE}
			<if test="!ordered.equals('') and ordered !=null ">
				<choose>
					<when test="ordered == 1">
						order by ARTERY_NAME asc
					</when>
					<otherwise>
					    order by ARTERY_ID asc
					</otherwise>
				</choose>			    
			</if>
		) A
	</select>

	<select id="selectNodeLink" resultType="arteryVO">
		SELECT LPAD(ROWNUM,2,'0') AS NUM, C.*
		FROM(
		SELECT
		  A.ARTERY_ID
		, A.ARTERY_NAME
		, A.AREA_CODE
		, B.SEQ_NO
		, B.L_NODE_NAME
		, B.NODELINK_ID
		FROM CODE_ARTERY A
		INNER JOIN CODE_NODELINK B
		ON A.ARTERY_ID = B.ARTERY_ID
		WHERE A.AREA_CODE = #{AREA_CODE}
		AND A.ARTERY_ID = #{ARTERY_ID}
		<if test="!ordered.equals('') and ordered !=null ">
			<choose>
				<when test="ordered == 1">
					order by L_NODE_NAME asc
				</when>
				<otherwise>
				    ORDER BY TO_NUMBER(SEQ_NO) asc
				</otherwise>
			</choose>			    
		</if>
		) C
	</select>

	<!-- 수신전화 목록 -->
	<select id="selectPickupCall" resultType="receiveCallVO">
	        SELECT T1.* FROM
			(
				SELECT
				ROWID
				, COUNT(*) OVER(PARTITION BY RECEIVED_CALL_TIME,RECEIVED_CALL_TEL ORDER BY RECEIVED_CALL_ID DESC) AS DVX
				,RECEIVED_CALL_ID
				, RECEIVED_CALL_time
				, REGEXP_REPLACE(RECEIVED_CALL_TEL ,'([[:digit:]]{'||
				DECODE(SUBSTR(RECEIVED_CALL_TEL,0,2
				),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
				RECEIVED_CALL_TEL
				,INFORMER_NAME
				,INFORMER_ID
				FROM RECEIVED_CALL
				WHERE AREA_CODE = #{AREA_CODE}
				AND RECEIVED_CALL_DAY = (SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') FROM DUAL)
				AND INTEL_NUM= #{INTEL_NUM}
			)T1
            WHERE T1.DVX=1
            ORDER BY RECEIVED_CALL_TIME DESC, RECEIVED_CALL_ID DESC
	    
<!-- 		SELECT T2.* FROM
		(
			SELECT MAX(T1.ROWID) OVER (PARTITION BY T1.RECEIVED_CALL_ID) AS DVX2 ,T1.*
			FROM
			(
				SELECT
				ROWID
				, COUNT(*) OVER(PARTITION BY RECEIVED_CALL_ID) AS DVX
				,RECEIVED_CALL_ID
				, RECEIVED_CALL_time
				, REGEXP_REPLACE(RECEIVED_CALL_TEL ,'([[:digit:]]{'||
				DECODE(SUBSTR(RECEIVED_CALL_TEL,0,2
				),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
				RECEIVED_CALL_TEL
				,INFORMER_NAME
				,INFORMER_ID
				FROM RECEIVED_CALL
				WHERE AREA_CODE = #{AREA_CODE}
				AND RECEIVED_CALL_DAY = (SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') FROM DUAL)
				AND INTEL_NUM=#{INTEL_NUM}
			)T1
		)T2
		WHERE T2.ROWID = T2.DVX2 ORDER BY T2.RECEIVED_CALL_TIME DESC -->
	</select>
	
	<!-- 부재중 전화 목록 -->
	<select id="selectMissedCall" resultType="missedCallVO">
	    
	    SELECT T1.* FROM
		(SELECT
		    ROWID
		    , COUNT(*) OVER(PARTITION BY MISSED_CALL_TIME,MISSED_CALL_TEL ORDER BY MISSED_CALL_ID DESC) AS DVX
		    ,MISSED_CALL_ID
		    , MISSED_CALL_TIME
		    , REGEXP_REPLACE(MISSED_CALL_TEL ,'([[:digit:]]{'||
		    DECODE(SUBSTR(MISSED_CALL_TEL,0,2
		    ),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
		    MISSED_CALL_TEL
		    , INFORMER_NAME
		    , STT_CONTENT
		    , FLAG_READ
		    , INFORMER_ID
		    FROM MISSED_CALL
		    WHERE AREA_CODE = #{AREA_CODE}
		    AND MISSED_CALL_DAY = (SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') FROM DUAL)
		)T1
		WHERE T1.DVX=1
		ORDER BY MISSED_CALL_TIME DESC, MISSED_CALL_ID DESC
	    
	    
<!-- 		SELECT T2.* FROM
		(
			SELECT MAX(T1.ROWID) OVER (PARTITION BY T1.MISSED_CALL_ID) AS DVX2 ,T1.*
			FROM
			(
				SELECT
				ROWID
				, COUNT(*) OVER(PARTITION BY MISSED_CALL_ID) AS DVX
				,MISSED_CALL_ID
				, MISSED_CALL_TIME
				, REGEXP_REPLACE(MISSED_CALL_TEL ,'([[:digit:]]{'||
				DECODE(SUBSTR(MISSED_CALL_TEL,0,2
				),'02',2,3)||'})([[:digit:]]{3,4})([[:digit:]]{4})','\1-\2-\3') AS
				MISSED_CALL_TEL
				, INFORMER_NAME
				, STT_CONTENT
				, FLAG_READ
				, INFORMER_ID
				FROM MISSED_CALL
				WHERE AREA_CODE = #{AREA_CODE}
				AND MISSED_CALL_DAY = (SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') FROM DUAL)
			)T1
		)T2
		WHERE T2.ROWID = T2.DVX2 ORDER BY T2.MISSED_CALL_TIME DESC -->
	</select>
	<!-- 수신 전화 등록 -->
	<insert id="insertReceiveCall" parameterType="missedCallVO">
    
		INSERT INTO RECEIVED_CALL 
		(
			 RECEIVED_CALL_ID
			,RECEIVED_CALL_TIME
			,RECEIVED_CALL_TEL
			,INFORMER_NAME
			,INTEL_NUM
			,AREA_CODE
			,INFORMER_ID
			,RECEIVED_CALL_DAY
		)
			SELECT 
			 (TO_CHAR(SYSDATE , 'YYYYMM') || TO_CHAR(SEQ_RECEIVED_CALL.NEXTVAL, 'FM0000009'))
			, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
			, #{PICKUP_CALL_FROM}
			, DECODE(A.INFORMER_NAME,'NODATA','시민',A.INFORMER_NAME)
			, #{PICKUP_CALL_INTEL}
			, #{AREA_CODE}
			, A.INFORMER_ID
			, TO_CHAR(SYSDATE, 'YYYYMMDD')
			 FROM
		    (
		    	select * from
		    	(
		    		SELECT INFORMER_ID, INFORMER_NAME, AREA_CODE FROM INFORMER
					WHERE PHONE_CELL = #{PICKUP_CALL_FROM}
					ORDER BY UPD_DATE DESC
				)
				where rownum = 1
				UNION ALL
				SELECT 'NODATA' AS INFORMER_ID ,'NODATA' AS INFORMER_NAME,'NODATA' AS AREA_CODE
            	FROM DUAL
			)A
			WHERE A.INFORMER_ID != 'NODATA' OR ROWNUM=1
	</insert>
	<!-- 부재중 전화 등록 -->
	<insert id="insertMissedCall" parameterType="missedCallVO">
		<selectKey keyProperty="MISSED_CALL_ID" resultType="string"
			order="BEFORE">
			SELECT (TO_CHAR(SYSDATE , 'YYYYMM') || TO_CHAR(SEQ_MISSED_CALL.NEXTVAL,
			'FM0000009')) FROM DUAL
		</selectKey>
		INSERT INTO MISSED_CALL
		VALUES(
		  #{MISSED_CALL_ID}
		, #{MISSED_CALL_TIME}
		, #{MISSED_CALL_TEL}
		, #{INFORMER_NAME}
		, #{STT_CONTENT}
		, 'N'
		)
	</insert>

	<select id="countReceivedStatusList" resultType="int">
		SELECT COUNT(RECEIPT_ID) FROM REPORT_RECEIPT_TODAY
		WHERE RECEIPT_DAY = #{RECEIPT_DAY}
         	<if test="!AREA_CODE.equals('080')">
         		AND REGION_ID = #{AREA_CODE}
         	</if>
	</select>

	<!-- 금일 접수 현황 쿼리 -->
	<select id="receivedStatusList" resultType="receivedStatusVO">
     
        SELECT * 
		FROM(
		    SELECT ROWNUM AS SEQ, H.* 
		    FROM(SELECT ROW_NUMBER() OVER(ORDER BY RECEIPT_DT ASC) AS RNUM, G.* 
		        FROM(
		        	SELECT A.RECEIPT_ID
	                    , TO_CHAR(A.RECEIPT_DAY,'YYYY-MM-DD') AS RECEIPT_DAY
	                    , A.RECEIPT_DAY||A.RECEIPT_TIME AS RECEIPT_DT
	                    , A.FLAG_SEND 
	                    , A.FLAG_BROD 
	                    , DECODE(A.X_COORDINATE , '' , 'N' , 'Y') AS FLAG_MAP  
	                    , TO_CHAR(TO_DATE(A.RECEIPT_TIME , 'HH24MI') , 'HH24:MI') AS RECEIPT_TIME
	                    , C.BAS_NAME AS REPORT_TYPE
	                    , C.F_COLOR
	                    , C.B_COLOR
	                    , D.BAS_NAME AS REPORT_TYPE2
	                    , A.INDIVIDUAL_ID
	                    , A.INDIVIDUAL_NAME
	                    , B.TYPE_NAME
	                    , A.RECEPTION_ID
	                    , A.RECEPTION_NAME
	                    , A.MEMO
	                    , E.NAME AS REPORTER_TYPE
	                    , F.AREA_NAME AS REGION_NAME
	                    , A.FLAG_IMPORTANT
	                    , A.FLAG_DISASTOR
	                    ,TO_CHAR(TO_DATE(A.BROAD_TIME,'YYYYMMDDHH24MISS'),'HH24:MI') AS BROAD_TIME
		            FROM REPORT_RECEIPT_TODAY A
		            LEFT OUTER JOIN CODE_INFORMER_TYPE B
		                ON A.INDIVIDUAL_TYPE = B.TYPE_ID
		            LEFT OUTER JOIN (SELECT * FROM CODE_REPORT_TYPE
		                        WHERE BAS_LCOD='100') C
		                ON A.REPORT_TYPE = C.BAS_SCOD
		            LEFT OUTER JOIN CODE_REPORT_TYPE D
		                ON D.BAS_SCOD = A.REPORT_TYPE2
		                AND D.BAS_LCOD = A.REPORT_TYPE
		            LEFT OUTER JOIN CODE_REPORTMEAN_TYPE E
		                ON A.REPORTER_TYPE = E.ID
		            LEFT OUTER JOIN CODE_AREACODE F
		                ON A.REGION_ID = F.AREA_CODE
		            WHERE A. RECEIPT_DAY = #{RECEIPT_DAY}
		            	<if test="!AREA_CODE.equals('080')">
		            		AND REGION_ID = #{AREA_CODE}
		            	</if>
		            ) G
		        ORDER BY RNUM DESC
		        )H
		    )
		<![CDATA[
		WHERE  SEQ > #{startRow} AND SEQ <= (#{startRow} + #{size})
        ]]>
	</select>

	<select id="countSearchStatusList" resultType="int">
        SELECT COUNT(*) FROM 
        	(
        	SELECT * FROM REPORT_RECEIPT_TODAY WHERE 1 = 1
				<if test="!REPORT_TYPE.equals('') and REPORT_TYPE != null">
						AND REPORT_TYPE = #{REPORT_TYPE}
				</if>
				<if test="!REPORT_TYPE2.equals('') and REPORT_TYPE2 != null">
					AND REPORT_TYPE2 = #{REPORT_TYPE2}
				</if>
				<if test="!REPORTMEAN_TYPE.equals('') and REPORTMEAN_TYPE != null">
					AND REPORTER_TYPE = #{REPORTMEAN_TYPE}
				</if>
				<if test="!FLAG_SEND.equals('') and FLAG_SEND != null">
					AND FLAG_SEND = #{FLAG_SEND}
				</if>
				<if test="!FLAG_BROD.equals('') and FLAG_BROD != null">
					AND FLAG_BROD = #{FLAG_BROD}
				</if>
				<if test="!AREA_CODE.equals('') and AREA_CODE != null">
					AND REGION_ID = #{AREA_CODE}
				</if>
				<if test="!START_DAY.equals('') and START_DAY != null and !END_DAY.equals('') and END_DAY != null">
					AND RECEIPT_DAY BETWEEN TO_CHAR(TO_DATE(#{START_DAY}, 'YYYY-MM-DD'), 'YYYYMMDD')
					AND TO_CHAR(TO_DATE(#{END_DAY}, 'YYYY-MM-DD'), 'YYYYMMDD')
				</if>
				<if test="!FLAG_IMPORTANT.equals('') and FLAG_IMPORTANT != null">
					<if test='FLAG_IMPORTANT.equals("N")'>
		                <![CDATA[AND FLAG_IMPORTANT = 'N']]>
		            </if>
		           	<if test='FLAG_IMPORTANT.equals("Y")'>
		           	    <![CDATA[AND FLAG_IMPORTANT <> 'N']]>
		           	</if>
				</if>
				<if test="FLAG_DISASTOR != null and !FLAG_DISASTOR.equals('')">
					<if test='FLAG_DISASTOR.equals("N")'>
		                <![CDATA[AND FLAG_DISASTOR = 'N']]>
		            </if>
		           	<if test='FLAG_DISASTOR.equals("Y")'>
		           	    <![CDATA[AND FLAG_DISASTOR <> 'N']]>
		           	</if>
				</if>
				<!-- 시간대별 검색 -->
				<if test="!RECEIPT_TIME.equals('') and RECEIPT_TIME != null">
					AND RECEIPT_TIME LIKE #{RECEIPT_TIME}||'%'
				</if>
				<if test="!RECEPTION_NAME.equals('') and RECEPTION_NAME != null">
					AND RECEPTION_NAME LIKE '%'||#{RECEPTION_NAME}||'%'
				</if>
				<if test="!INDIVIDUAL_NAME.equals('') and INDIVIDUAL_NAME != null">
					AND INDIVIDUAL_NAME LIKE '%'||#{INDIVIDUAL_NAME}||'%'
				</if>
				
				<choose>
					<when test="rcptAndOr.equals('AND')">
					    <choose>
					        <when test="!CONTENT1.equals('') and CONTENT1 != null and !CONTENT2.equals('') and CONTENT2 != null">
						   		AND MEMO LIKE '%'||#{CONTENT1}||'%' AND MEMO LIKE '%'||#{CONTENT2}||'%'
							</when>
							<otherwise>
							    <if test="!CONTENT1.equals('') and CONTENT1 != null">
									AND MEMO LIKE '%'||#{CONTENT1}||'%'
								</if>
							    <if test="!CONTENT2.equals('') and CONTENT2 != null">
									AND MEMO LIKE '%'||#{CONTENT2}||'%'
								</if>
							</otherwise>
					    </choose>
					</when>
					<otherwise>
					    <choose>
					        <when test="!CONTENT1.equals('') and CONTENT1 != null and !CONTENT2.equals('') and CONTENT2 != null">
							    and 
							    (
									MEMO LIKE '%'||#{CONTENT1}||'%'
							    	or
									MEMO LIKE '%'||#{CONTENT2}||'%'
								)
							</when>
							<otherwise>
							    <if test="!CONTENT1.equals('') and CONTENT1 != null">
									AND MEMO LIKE '%'||#{CONTENT1}||'%'
								</if>
							    <if test="!CONTENT2.equals('') and CONTENT2 != null">
									AND MEMO LIKE '%'||#{CONTENT2}||'%'
								</if>
							</otherwise>
					    </choose>
					</otherwise>    
				</choose>
				
			 )
	</select>

	<select id="searchStatusList" resultType="receivedStatusVO">
       
        SELECT *
		FROM(SELECT ROWNUM AS SEQ, H.*
		    FROM(SELECT ROW_NUMBER() OVER(ORDER BY RECEIPT_DT ASC) AS RNUM, G.*
		        FROM(
				SELECT A.RECEIPT_ID
					, TO_CHAR(A.RECEIPT_DAY,'YYYY-MM-DD') AS RECEIPT_DAY
					, A.RECEIPT_DAY||A.RECEIPT_TIME AS RECEIPT_DT
					, A.FLAG_SEND 
					, A.FLAG_BROD 
					, DECODE(A.X_COORDINATE , '' , 'N' , 'Y') AS FLAG_MAP  
					, TO_CHAR(TO_DATE(A.RECEIPT_TIME , 'HH24MI') , 'HH24:MI') AS RECEIPT_TIME
					, C.BAS_NAME AS REPORT_TYPE
					, C.F_COLOR
					, C.B_COLOR
					, D.BAS_NAME AS REPORT_TYPE2
					, A.INDIVIDUAL_ID
					, A.INDIVIDUAL_NAME
					, B.TYPE_NAME
					, A.RECEPTION_ID
					, A.RECEPTION_NAME
					, A.MEMO
					, E.NAME AS REPORTER_TYPE
					, F.AREA_NAME AS REGION_NAME
					, A.FLAG_IMPORTANT
					, TO_CHAR(TO_DATE(A.BROAD_TIME,'YYYYMMDDHH24MISS'),'HH24:MI') AS BROAD_TIME
		            FROM 
		            (
		            	SELECT * FROM REPORT_RECEIPT_TODAY 
		            	WHERE 1 = 1
						<if test="!REPORT_TYPE.equals('') and REPORT_TYPE != null">
							AND REPORT_TYPE = #{REPORT_TYPE}
						</if>
						<if test="!REPORT_TYPE2.equals('') and REPORT_TYPE2 != null">
							AND REPORT_TYPE2 = #{REPORT_TYPE2}
						</if>
						<if test="!REPORTMEAN_TYPE.equals('') and REPORTMEAN_TYPE != null">
							AND REPORTER_TYPE = #{REPORTMEAN_TYPE}
						</if>
						<if test="!FLAG_SEND.equals('') and FLAG_SEND != null">
							AND FLAG_SEND = #{FLAG_SEND}
						</if>
						<if test="!FLAG_BROD.equals('') and FLAG_BROD != null">
							AND FLAG_BROD = #{FLAG_BROD}
						</if>
						<if test="!AREA_CODE.equals('') and AREA_CODE != null">
							AND REGION_ID = #{AREA_CODE}
						</if>
						<if test="!START_DAY.equals('') and START_DAY != null and !END_DAY.equals('') and END_DAY != null">
							AND RECEIPT_DAY BETWEEN TO_CHAR(TO_DATE(#{START_DAY}, 'YYYY-MM-DD'), 'YYYYMMDD')
											    AND TO_CHAR(TO_DATE(#{END_DAY}, 'YYYY-MM-DD'), 'YYYYMMDD')
						</if>
						<if test="!FLAG_IMPORTANT.equals('') and FLAG_IMPORTANT != null">
							<if test='FLAG_IMPORTANT.equals("N")'>
	                            <![CDATA[AND FLAG_IMPORTANT = 'N']]>
	                        </if>
	                    	<if test='FLAG_IMPORTANT.equals("Y")'>
	                    	    <![CDATA[AND FLAG_IMPORTANT <> 'N']]>
	                    	</if>
						</if>
						<if test="FLAG_DISASTOR != null and !FLAG_DISASTOR.equals('')">
							<if test='FLAG_DISASTOR.equals("N")'>
	                            <![CDATA[AND FLAG_DISASTOR = 'N']]>
	                        </if>
	                    	<if test='FLAG_DISASTOR.equals("Y")'>
	                    	    <![CDATA[AND FLAG_DISASTOR <> 'N']]>
	                    	</if>
						</if>
				<!-- 시간대별 검색 -->
				<if test="!RECEIPT_TIME.equals('') and RECEIPT_TIME != null">
					AND RECEIPT_TIME LIKE #{RECEIPT_TIME}||'%'
				</if>
				<if test="!RECEPTION_NAME.equals('') and RECEPTION_NAME != null">
					AND RECEPTION_NAME LIKE '%'||#{RECEPTION_NAME}||'%'
				</if>
				<if test="!INDIVIDUAL_NAME.equals('') and INDIVIDUAL_NAME != null">
					AND INDIVIDUAL_NAME LIKE '%'||#{INDIVIDUAL_NAME}||'%'
				</if>
				
				<choose>
					<when test="rcptAndOr.equals('AND')">
					    <choose>
					        <when test="!CONTENT1.equals('') and CONTENT1 != null and !CONTENT2.equals('') and CONTENT2 != null">
						   		AND MEMO LIKE '%'||#{CONTENT1}||'%' AND MEMO LIKE '%'||#{CONTENT2}||'%'
							</when>
							<otherwise>
							    <if test="!CONTENT1.equals('') and CONTENT1 != null">
									AND MEMO LIKE '%'||#{CONTENT1}||'%'
								</if>
							    <if test="!CONTENT2.equals('') and CONTENT2 != null">
									AND MEMO LIKE '%'||#{CONTENT2}||'%'
								</if>
							</otherwise>
					    </choose>
					</when>
					<otherwise>
					    <choose>
					        <when test="!CONTENT1.equals('') and CONTENT1 != null and !CONTENT2.equals('') and CONTENT2 != null">
							    and 
							    (
									MEMO LIKE '%'||#{CONTENT1}||'%'
							    	or
									MEMO LIKE '%'||#{CONTENT2}||'%'
								)
							</when>
							<otherwise>
							    <if test="!CONTENT1.equals('') and CONTENT1 != null">
									AND MEMO LIKE '%'||#{CONTENT1}||'%'
								</if>
							    <if test="!CONTENT2.equals('') and CONTENT2 != null">
									AND MEMO LIKE '%'||#{CONTENT2}||'%'
								</if>
							</otherwise>
					    </choose>
					</otherwise>    
				</choose>
					) A
	                LEFT OUTER JOIN CODE_INFORMER_TYPE B
	                    ON A.INDIVIDUAL_TYPE = B.TYPE_ID
	                LEFT OUTER JOIN 
	                (SELECT * FROM CODE_REPORT_TYPE WHERE BAS_LCOD='100') C
	                    ON A.REPORT_TYPE = C.BAS_SCOD
	                LEFT OUTER JOIN CODE_REPORT_TYPE D
	                    ON D.BAS_SCOD = A.REPORT_TYPE2
	                    AND D.BAS_LCOD = A.REPORT_TYPE
	                LEFT OUTER JOIN CODE_REPORTMEAN_TYPE E
			                ON A.REPORTER_TYPE = E.ID
		            LEFT OUTER JOIN CODE_AREACODE F
		                ON A.REGION_ID = F.AREA_CODE
	            ) G
	            ORDER BY RNUM DESC
	        ) H
	    )
		<![CDATA[
		WHERE  SEQ > #{startRow} AND SEQ <= (#{startRow} + #{size})
		]]>
	</select>

	<select id="selectEditVO" resultType="editVO">
		SELECT A.RECEIPT_ID
		, TO_CHAR(A.RECEIPT_DAY,'YYYY-MM-DD') AS RECEIPT_DAY
		, A.FLAG_SEND
		, A.FLAG_BROD
		, A.FLAG_IMPORTANT
		, A.FLAG_DISASTOR
		, DECODE(A.X_COORDINATE , '' , 'N' , 'Y') AS FLAG_MAP
		, TO_CHAR(TO_DATE(A.RECEIPT_TIME , 'HH24MI') , 'HH24:MI') AS
		RECEIPT_TIME
		, A.REPORT_TYPE
		, A.REPORT_TYPE2
		, A.INDIVIDUAL_ID
		, A.INDIVIDUAL_NAME
		, B.TYPE_ID
		, B.TYPE_NAME
		, A.RECEPTION_NAME
		, A.MEMO
		, A.REPORTER_TYPE
		, A.REGION_ID
		FROM REPORT_RECEIPT_TODAY A
		LEFT OUTER JOIN CODE_INFORMER_TYPE B
		ON A.INDIVIDUAL_TYPE = B.TYPE_ID
		WHERE RECEIPT_ID = #{RECEIPT_ID}
	</select>

	<update id="updateReceipt" parameterType="editVO">
		UPDATE REPORT_RECEIPT_TODAY
		<trim prefix="SET" suffixOverrides=",">
		    FLAG_IMPORTANT = 
		    <!-- 220905 제보내용에 '긴급'문구가 포함된 경우 긴급으로 처리하도록 -->
			CASE WHEN 
			<!-- 긴급제보 체크됬을땐 제보내용에 상관없이 Y -->
				#{FLAG_IMPORTANT} like '%Y%' then 'Y'
			<!-- 긴급이 N일경우 제보내용에 긴급 포함되면 Y --> 
			ELSE 
				CASE WHEN 
					#{MEMO} like '%긴급%' then 'Y' else 'N' 
				END
			END,
			<if test="FLAG_DISASTOR != null and !FLAG_DISASTOR.equals('')">
				FLAG_DISASTOR = #{FLAG_DISASTOR},
			</if>
			<if test="!FLAG_SEND.equals('') and FLAG_SEND != null">
				FLAG_SEND = #{FLAG_SEND},
			</if>
			<if test="!REPORT_TYPE.equals('') and REPORT_TYPE != null">
				REPORT_TYPE = #{REPORT_TYPE},
			</if>
			<if test="!REPORT_TYPE2.equals('') and REPORT_TYPE2 != null">
				REPORT_TYPE2 = #{REPORT_TYPE2},
			</if>
			<if test="!MEMO.equals('') and MEMO != null">
				MEMO = #{MEMO},
			</if>
			<if test="!REPORTER_TYPE.equals('') and REPORTER_TYPE != null">
				REPORTER_TYPE = #{REPORTER_TYPE},
			</if>
			<if test="!REGION_ID.equals('') and REGION_ID != null">
				REGION_ID = #{REGION_ID},
			</if>
			<if test="INDIVIDUAL_ID != null and !INDIVIDUAL_ID.equals('')  ">
				INDIVIDUAL_ID = #{INDIVIDUAL_ID},
			</if>
			<if test="INDIVIDUAL_NAME != null and !INDIVIDUAL_NAME.equals('')  ">
				INDIVIDUAL_NAME = #{INDIVIDUAL_NAME},
			</if>
			<if test="TYPE_ID != null and ! TYPE_ID.equals('')  ">
				INDIVIDUAL_TYPE = #{TYPE_ID},
			</if>
			
		</trim>
		WHERE RECEIPT_ID = #{RECEIPT_ID}
	</update>

	<select id="showEditResult" resultType="receivedStatusVO">
		SELECT A.RECEIPT_ID
		, TO_CHAR(A.RECEIPT_DAY,'YYYY-MM-DD') AS RECEIPT_DAY
		, A.FLAG_SEND
		, A.FLAG_BROD
		, A.FLAG_IMPORTANT
		, A.FLAG_DISASTOR
		, DECODE(A.X_COORDINATE , '' , 'N' , 'Y') AS FLAG_MAP
		, TO_CHAR(TO_DATE(A.RECEIPT_TIME , 'HH24MI') , 'HH24:MI') AS RECEIPT_TIME
		, C.BAS_NAME AS REPORT_TYPE
		, C.F_COLOR
		, C.B_COLOR
		, D.BAS_NAME AS REPORT_TYPE2
		, A.INDIVIDUAL_ID
		, A.INDIVIDUAL_NAME
		, B.TYPE_NAME
		, A.RECEPTION_ID
		, A.RECEPTION_NAME
		, A.MEMO
		, E.NAME AS REPORTER_TYPE
		, F.AREA_NAME AS REGION_NAME
		FROM REPORT_RECEIPT_TODAY A
		LEFT OUTER JOIN CODE_INFORMER_TYPE B
		ON A.INDIVIDUAL_TYPE = B.TYPE_ID
		LEFT OUTER JOIN (SELECT * FROM CODE_REPORT_TYPE
		WHERE BAS_LCOD='100') C
		ON A.REPORT_TYPE = C.BAS_SCOD
		LEFT OUTER JOIN CODE_REPORT_TYPE D
		ON D.BAS_SCOD = A.REPORT_TYPE2
		AND D.BAS_LCOD = A.REPORT_TYPE
		LEFT OUTER JOIN CODE_REPORTMEAN_TYPE E
		ON A.REPORTER_TYPE = E.ID
		LEFT OUTER JOIN CODE_AREACODE F
		ON A.REGION_ID = F.AREA_CODE
		WHERE A. RECEIPT_ID = #{RECEIPT_ID}
	</select>

	<update id="updateFlagSTT" parameterType="string">
		UPDATE MISSED_CALL
		SET FLAG_READ = 'Y'
		WHERE MISSED_CALL_ID = #{MISSED_CALL_ID}
	</update>

	<update id="updatePersonalMemo" parameterType="userVo">
		UPDATE SYS_USER SET MEMO = #{memo}
		WHERE USER_ID = #{userId}
	</update>

	<resultMap type="userVO" id="selectPersonalMemo">
		<result property="userId" column="USER_ID" />
		<result property="userPw" column="USER_PW" />
		<result property="userName" column="USER_NAME" />
		<result property="regionId" column="REGION_ID" />
		<result property="regionName" column="REGION_NAME" />
		<result property="userPhone" column="USER_TEL" />
		<result property="authCode" column="AUTH_CODE" />
		<result property="authName" column="AUTH_NAME" />
		<result property="flagUse" column="FLAG_USE" />
		<result property="memo" column="MEMO" />
		<result property="inTel" column="IN_TEL" />
		<result property="regDt" column="REG_DT" />
		<result property="stDt" column="ST" />
		<result property="fnDt" column="FN" />
		<result property="cnYn" column="CN_YN" />
	</resultMap>
	<select id="selectPersonalMemo" parameterType="userVo" resultType="userVo">
		SELECT * FROM SYS_USER
		WHERE USER_ID = #{userId}
	</select>

	<select id="checkIfPickUpInfoExists" resultType="pickUpCallVO">
	    SELECT * FROM
	    (
		    SELECT * FROM PICKUP_CALL
			WHERE PICKUP_CALL_INTEL = #{PICKUP_CALL_INTEL}
			AND AREA_CODE = #{AREA_CODE}
			ORDER BY PICKUP_CALL_TIME
	    )
		WHERE ROWNUM = 1
	</select>

	<delete id="deletePickUpInfo">
		DELETE FROM PICKUP_CALL
		WHERE PICKUP_CALL_ID = #{PICKUP_CALL_ID}
	</delete>

	<!-- 임시저장 -->
	<insert id="tempSave" parameterType="TempSaveVo">
		INSERT INTO TEMP_SAVE(
		TS_TIME
		,RECEPTION_ID
		,RECEPTION_NAME
		,FLAG_IMPORTANT
		,FLAG_DISASTOR
		,FLAG_SEND
		,MEMO
		,ARTERY_NAME
		,LANE
		,F_NODE_NAME
		,T_NODE_NAME
		,REPORT_TYPE3
		,REPORT_TYPE
		,REPORT_TYPE2
		,R_TEL
		,REGION_ID
		,AREA_ID
		,REPORTER_TYPE
		,X_COORDINATE
		,Y_COORDINATE
		,START_DAY
		,STARTTIMEHH
		,STARTTIMEMI
		,END_DAY
		,ENDTIMEHH
		,ENDTIMEMI
		,SEARCHTYPE3
		,SEARCH_TEXT3
		,INDIVIDUAL_ID
		,ACT_ID
		,INFORMER_NONE
		,INDIVIDUAL_NAME
		,PHONE_CELL
		,PHONE_HOME
		,ADDRESS_HOME
		,INDIVIDUAL_TYPE
		,INFORMER_TYPE_NM
		,ORG_ID
		,ORG_SUB_ID
		,ORG_NAME
		,ORG_SUB_NAME
		,STAT1
		,STAT2
		,STAT3
		,FLAG_BLACKLIST
		,MEMO_INFORMER
		,MISSED_CALL_ID
		,ARTERY_ID
		,F_LINK_ID
		,T_LINK_ID
		)
		VALUES(
		to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')
		,#{RECEPTION_ID}
		,#{RECEPTION_NAME}
		,#{FLAG_IMPORTANT}
		,#{FLAG_DISASTOR}
		,#{FLAG_SEND}
		,#{MEMO}
		,#{ARTERY_NAME}
		,#{LANE}
		,#{F_NODE_NAME}
		,#{T_NODE_NAME}
		,#{REPORT_TYPE3}
		,#{REPORT_TYPE}
		,#{REPORT_TYPE2}
		,#{R_TEL}
		,#{REGION_ID}
		,#{AREA_ID}
		,#{REPORTER_TYPE}
		,#{X_COORDINATE}
		,#{Y_COORDINATE}
		,#{START_DAY}
		,#{STARTTIMEHH}
		,#{STARTTIMEMI}
		,#{END_DAY}
		,#{ENDTIMEHH}
		,#{ENDTIMEMI}
		,#{SEARCHTYPE3}
		,#{SEARCH_TEXT3}
		,#{INDIVIDUAL_ID}
		,#{ACT_ID}
		,#{INFORMER_NONE}
		,#{INDIVIDUAL_NAME}
		,#{PHONE_CELL}
		,#{PHONE_HOME}
		,#{ADDRESS_HOME}
		,#{INDIVIDUAL_TYPE}
		,#{INFORMER_TYPE_NM}
		,#{ORG_ID}
		,#{ORG_SUB_ID}
		,#{ORG_NAME}
		,#{ORG_SUB_NAME}
		,#{STAT1}
		,#{STAT2}
		,#{STAT3}
		,#{FLAG_BLACKLIST}
		,#{MEMO_INFORMER}
		,#{MISSED_CALL_ID}
		,#{ARTERY_ID}
		,#{F_LINK_ID}
		,#{T_LINK_ID}
		)
	</insert>

	<!-- 당일 로그인 사용자에 대한 임시저장 전체목록 불러오기 (금일만)-->
	<!-- <select id="tempsaveList" resultType="TempSaveVo">
	    <![CDATA[
		SELECT TS_TIME,RECEPTION_ID,INDIVIDUAL_NAME FROM TEMP_SAVE 
		WHERE RECEPTION_ID = #{RECEPTION_ID}
		AND TO_DATE(TO_DATE(TS_TIME,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd') 
		>= TO_DATE(sysdate,'yyyy-mm-dd')
		ORDER BY TS_TIME DESC
		]]>
	</select> -->
	
	
	<!-- 당일 로그인 사용자에 대한 임시저장 전체목록 불러오기(전체 기간) -->
	<select id="tempsaveList" resultType="TempSaveVo">
	    <![CDATA[
		SELECT TS_TIME,RECEPTION_ID,INDIVIDUAL_NAME FROM TEMP_SAVE 
		WHERE RECEPTION_ID = #{RECEPTION_ID}
		ORDER BY TS_TIME DESC
		]]>
	</select>
	
	<!-- 선택한  임시저장 데이터를 불러와서 반영-->
	<select id="tempsavePush" resultType="TempSaveVo">
		SELECT * FROM TEMP_SAVE
		WHERE TS_TIME = #{TS_TIME}
		AND RECEPTION_ID = #{RECEPTION_ID}
	</select>
	
	<!-- 임시저장 삭제 -->
	<delete id="tempSaveDelete">
		DELETE FROM TEMP_SAVE 
		WHERE TS_TIME IN
		<foreach collection="chkList" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
	</delete>
	
	<!-- ################# 전체접수용 테이블 분할 관련 230118 ################ -->
	
	<!--최초 전체접수 진입 시 / 전체접수 행 갯수 파악 -->
	<select id="countSearchStatusListFR" resultType="int">
        SELECT COUNT(RECEIPT_ID) FROM 
        	(
        	SELECT * FROM REPORT_RECEIPT WHERE 1 = 1
        		<if test="!AREA_CODE.equals('') and AREA_CODE != null">
					AND REGION_ID = #{AREA_CODE}
				</if>
				<if test="!START_DAY.equals('') and START_DAY != null and !END_DAY.equals('') and END_DAY != null">
					AND RECEIPT_DAY BETWEEN TO_DATE(#{START_DAY}, 'YYYY-MM-DD')
									    AND TO_DATE(#{END_DAY}, 'YYYY-MM-DD')
				</if>
				<if test="!REPORT_TYPE.equals('') and REPORT_TYPE != null">
						AND REPORT_TYPE = #{REPORT_TYPE}
				</if>
				<if test="!REPORT_TYPE2.equals('') and REPORT_TYPE2 != null">
					AND REPORT_TYPE2 = #{REPORT_TYPE2}
				</if>
				<if test="!REPORTMEAN_TYPE.equals('') and REPORTMEAN_TYPE != null">
					AND REPORTER_TYPE = #{REPORTMEAN_TYPE}
				</if>
				<if test="!FLAG_SEND.equals('') and FLAG_SEND != null">
					AND FLAG_SEND = #{FLAG_SEND}
				</if>
				<if test="!FLAG_BROD.equals('') and FLAG_BROD != null">
					AND FLAG_BROD = #{FLAG_BROD}
				</if>
				<if test="!FLAG_IMPORTANT.equals('') and FLAG_IMPORTANT != null">
					<if test='FLAG_IMPORTANT.equals("N")'>
		                <![CDATA[AND FLAG_IMPORTANT = 'N']]>
		            </if>
		           	<if test='FLAG_IMPORTANT.equals("Y")'>
		           	    <![CDATA[AND FLAG_IMPORTANT <> 'N']]>
		           	</if>
				</if>
				<if test="FLAG_DISASTOR != null and !FLAG_DISASTOR.equals('')">
					AND FLAG_DISASTOR = #{FLAG_DISASTOR}
				</if>
				<!-- 시간대별 검색 -->
				<if test="!RECEIPT_TIME.equals('') and RECEIPT_TIME != null">
					AND RECEIPT_TIME LIKE #{RECEIPT_TIME}||'%'
				</if>
				<if test="!RECEPTION_NAME.equals('') and RECEPTION_NAME != null">
					AND RECEPTION_NAME LIKE '%'||#{RECEPTION_NAME}||'%'
				</if>
				<if test="!INDIVIDUAL_NAME.equals('') and INDIVIDUAL_NAME != null">
					AND INDIVIDUAL_NAME LIKE '%'||#{INDIVIDUAL_NAME}||'%'
				</if>
				
				<choose>
					<when test="rcptAndOr.equals('AND')">
					    <choose>
					        <when test="!CONTENT1.equals('') and CONTENT1 != null and !CONTENT2.equals('') and CONTENT2 != null">
						   		AND MEMO LIKE '%'||#{CONTENT1}||'%' AND MEMO LIKE '%'||#{CONTENT2}||'%'
							</when>
							<otherwise>
							    <if test="!CONTENT1.equals('') and CONTENT1 != null">
									AND MEMO LIKE '%'||#{CONTENT1}||'%'
								</if>
							    <if test="!CONTENT2.equals('') and CONTENT2 != null">
									AND MEMO LIKE '%'||#{CONTENT2}||'%'
								</if>
							</otherwise>
					    </choose>
					</when>
					<otherwise>
					    <choose>
					        <when test="!CONTENT1.equals('') and CONTENT1 != null and !CONTENT2.equals('') and CONTENT2 != null">
							    and 
							    (
									MEMO LIKE '%'||#{CONTENT1}||'%'
							    	or
									MEMO LIKE '%'||#{CONTENT2}||'%'
								)
							</when>
							<otherwise>
							    <if test="!CONTENT1.equals('') and CONTENT1 != null">
									AND MEMO LIKE '%'||#{CONTENT1}||'%'
								</if>
							    <if test="!CONTENT2.equals('') and CONTENT2 != null">
									AND MEMO LIKE '%'||#{CONTENT2}||'%'
								</if>
							</otherwise>
					    </choose>
					</otherwise>    
				</choose>
				
			 )
	</select>

	<!-- 전체접수현황 최초/검색 -->
	<select id="searchStatusListFR" resultType="receivedStatusVO" fetchSize="10000">
        SELECT * 
		FROM(
			SELECT ROWNUM AS SEQ, H.*
		    FROM( 
		    	SELECT ROW_NUMBER() OVER(ORDER BY RECEIPT_DT ASC) AS RNUM, G.*
		        FROM(
				SELECT A.RECEIPT_ID
					, TO_CHAR(A.RECEIPT_DAY,'YYYY-MM-DD') AS RECEIPT_DAY
					, A.RECEIPT_DAY||' '||A.RECEIPT_TIME AS RECEIPT_DT
					, A.FLAG_SEND 
					, A.FLAG_BROD 
					, DECODE(A.X_COORDINATE , '' , 'N' , 'Y') AS FLAG_MAP  
					, TO_CHAR(TO_DATE(A.RECEIPT_TIME , 'HH24MI') , 'HH24:MI') AS RECEIPT_TIME
					, C.BAS_NAME AS REPORT_TYPE
					, C.F_COLOR
					, C.B_COLOR
					, D.BAS_NAME AS REPORT_TYPE2
					, A.INDIVIDUAL_ID
					, A.INDIVIDUAL_NAME
					, B.TYPE_NAME
					, A.RECEPTION_ID
					, A.RECEPTION_NAME
					, A.MEMO
					, E.NAME AS REPORTER_TYPE
					, F.AREA_NAME AS REGION_NAME
					, A.FLAG_IMPORTANT
					, A.FLAG_DISASTOR
					, TO_CHAR(TO_DATE(A.BROAD_TIME,'YYYYMMDDHH24MISS'),'HH24:MI') AS BROAD_TIME
		            FROM 
		            (
		            	SELECT * FROM REPORT_RECEIPT 
		            	WHERE 1 = 1
		            	<if test="!AREA_CODE.equals('') and AREA_CODE != null">
							AND REGION_ID = #{AREA_CODE}
						</if>
						<if test="!START_DAY.equals('') and START_DAY != null and !END_DAY.equals('') and END_DAY != null">
							AND RECEIPT_DAY BETWEEN TO_DATE(#{START_DAY}, 'YYYY-MM-DD')
											    AND TO_DATE(#{END_DAY}, 'YYYY-MM-DD')
						</if>
						<!-- 시간대별 검색 -->
						<if test="!RECEIPT_TIME.equals('') and RECEIPT_TIME != null">
							AND RECEIPT_TIME LIKE #{RECEIPT_TIME}||'%'
						</if>
						<if test="!REPORT_TYPE.equals('') and REPORT_TYPE != null">
							AND REPORT_TYPE = #{REPORT_TYPE}
						</if>
						<if test="!REPORT_TYPE2.equals('') and REPORT_TYPE2 != null">
							AND REPORT_TYPE2 = #{REPORT_TYPE2}
						</if>
						<if test="!REPORTMEAN_TYPE.equals('') and REPORTMEAN_TYPE != null">
							AND REPORTER_TYPE = #{REPORTMEAN_TYPE}
						</if>
						<if test="!FLAG_SEND.equals('') and FLAG_SEND != null">
							AND FLAG_SEND = #{FLAG_SEND}
						</if>
						<if test="!FLAG_BROD.equals('') and FLAG_BROD != null">
							AND FLAG_BROD = #{FLAG_BROD}
						</if>
						<if test="!FLAG_IMPORTANT.equals('') and FLAG_IMPORTANT != null">
							<if test='FLAG_IMPORTANT.equals("N")'>
	                            <![CDATA[AND FLAG_IMPORTANT = 'N']]>
	                        </if>
	                    	<if test='FLAG_IMPORTANT.equals("Y")'>
	                    	    <![CDATA[AND FLAG_IMPORTANT <> 'N']]>
	                    	</if>
						</if>
						<if test="FLAG_DISASTOR != null and !FLAG_DISASTOR.equals('')">
							<if test='FLAG_DISASTOR.equals("N")'>
	                            <![CDATA[AND FLAG_IMPORTANT = 'N']]>
	                        </if>
	                    	<if test='FLAG_DISASTOR.equals("Y")'>
	                    	    <![CDATA[AND FLAG_IMPORTANT <> 'N']]>
	                    	</if>
						</if>
				<if test="!RECEPTION_NAME.equals('') and RECEPTION_NAME != null">
					AND RECEPTION_NAME LIKE '%'||#{RECEPTION_NAME}||'%'
				</if>
				<if test="!INDIVIDUAL_NAME.equals('') and INDIVIDUAL_NAME != null">
					AND INDIVIDUAL_NAME LIKE '%'||#{INDIVIDUAL_NAME}||'%'
				</if>
				
				<choose>
					<when test="rcptAndOr.equals('AND')">
					    <choose>
					        <when test="!CONTENT1.equals('') and CONTENT1 != null and !CONTENT2.equals('') and CONTENT2 != null">
						   		AND MEMO LIKE '%'||#{CONTENT1}||'%' AND MEMO LIKE '%'||#{CONTENT2}||'%'
							</when>
							<otherwise>
							    <if test="!CONTENT1.equals('') and CONTENT1 != null">
									AND MEMO LIKE '%'||#{CONTENT1}||'%'
								</if>
							    <if test="!CONTENT2.equals('') and CONTENT2 != null">
									AND MEMO LIKE '%'||#{CONTENT2}||'%'
								</if>
							</otherwise>
					    </choose>
					</when>
					<otherwise>
					    <choose>
					        <when test="!CONTENT1.equals('') and CONTENT1 != null and !CONTENT2.equals('') and CONTENT2 != null">
							    and 
							    (
									MEMO LIKE '%'||#{CONTENT1}||'%'
							    	or
									MEMO LIKE '%'||#{CONTENT2}||'%'
								)
							</when>
							<otherwise>
							    <if test="!CONTENT1.equals('') and CONTENT1 != null">
									AND MEMO LIKE '%'||#{CONTENT1}||'%'
								</if>
							    <if test="!CONTENT2.equals('') and CONTENT2 != null">
									AND MEMO LIKE '%'||#{CONTENT2}||'%'
								</if>
							</otherwise>
					    </choose>
					</otherwise>    
				</choose>
					) A
	                LEFT OUTER JOIN CODE_INFORMER_TYPE B
	                    ON A.INDIVIDUAL_TYPE = B.TYPE_ID
	                LEFT OUTER JOIN 
	                (SELECT * FROM CODE_REPORT_TYPE WHERE BAS_LCOD='100') C
	                    ON A.REPORT_TYPE = C.BAS_SCOD
	                LEFT OUTER JOIN CODE_REPORT_TYPE D
	                    ON D.BAS_SCOD = A.REPORT_TYPE2
	                    AND D.BAS_LCOD = A.REPORT_TYPE
	                LEFT OUTER JOIN CODE_REPORTMEAN_TYPE E
			                ON A.REPORTER_TYPE = E.ID
		            LEFT OUTER JOIN CODE_AREACODE F
		                ON A.REGION_ID = F.AREA_CODE
	            ) G
	            ORDER BY RNUM DESC
	        ) H
	    )
		<![CDATA[
		WHERE  SEQ > #{startRow} AND SEQ <= (#{startRow} + #{size})
		]]>
	</select>
	
	<!-- 전체접수현황 관련 쿼리 끝 -->
	
</mapper>